參考網址
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://medium.com/@yangdavid_34530/%E5%9C%A8-centos-7-%E4%B8%8A%E5%AE%89%E8%A3%9D-kubernetes-v1-18-5-7cc9c9d6218

將主機名稱改為 k8s-master
hostnamectl set-hostname k8s-master

載入br_netfilter模組；重啟OS
echo "br_netfilter" > /etc/modules-load.d/br_netfilter.conf
reboot

檢查主機名稱和模組
hostname
lsmod | grep br_netfilter

確認 iptable 允許 bridge 通訊；用sysctl重新載入新的設定
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

開啟以下的 ports；參考官方文件的列表：https://kubernetes.io/docs/reference/ports-and-protocols/
firewall-cmd --add-port=6443/tcp --permanent
firewall-cmd --add-port=2379-2380/tcp --permanent
firewall-cmd --add-port=10250/tcp --permanent
firewall-cmd --add-port=10251/udp --permanent
firewall-cmd --add-port=10252/tcp --permanent
firewall-cmd --reload

安裝docker
1.更新yum
yum -y update

2.安裝yum-utils
yum -y install yum-utils

3.新增yum資源庫
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum -y install epel-release

4.安裝最新版docker套件
yum -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose

建立目錄 /etc/docker
mkdir /etc/docker

設定 Docker Daemon
cat > /etc/docker/daemon.json <<EOF
{
"exec-opts": ["native.cgroupdriver=systemd"],
"log-driver": "json-file",
"log-opts": {
"max-size": "100m"
},
"storage-driver": "overlay2",
"storage-opts": [
"overlay2.override_kernel_check=true"
]
}
EOF
mkdir -p /etc/systemd/system/docker.service.d
systemctl daemon-reload
systemctl restart docker
systemctl enable docker

開始安裝 CRI-O的準備
cat <<EOF | tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF

cat <<EOF | tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sysctl --system

下載及安裝 CRI-O package；使用CentOS 7及CRI-O version 1.20
export OS=CentOS_7
export VERSION=1.20
curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo
yum install cri-o -y

啟動 CRI-O
systemctl daemon-reload
systemctl enable crio --now

設定CRI-O cgroupfs 為了讓它與 kubelet 一致
cat <<EOF | tee /etc/crio/crio.conf.d/02-cgroup-manager.conf
[crio.runtime]
conmon_cgroup = "pod"
cgroup_manager = "cgroupfs"
EOF

準備安裝 kubeadm, kubelet and kubectl
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

關閉 SELinux
setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

安裝 kubelet, kubeadm and kubectl 等工具
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet

關閉 Swap；重啟OS
sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
swapoff -a
reboot

建立一個獨立的 control-plane；把最後的文字複製起來
kubeadm init --pod-network-cidr=10.1.0.0/16 --cri-socket /var/run/crio/crio.sock

kubeadm join 192.168.105.220:6443 --token abugq8.oqmz3ut17bxztiyd 
    --discovery-token-ca-cert-hash sha256:ce2c26377445ffea78db8d8d5e93eae8b8d62e6a179aa31b6c0854c408828c76

建立連線用的設定檔案
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
kubectl get nodes

安裝 Calico
kubectl apply -f https://docs.projectcalico.org/v3.21/manifests/calico.yaml
kubectl get pods -n kube-system

Worker Node 安裝
主機名稱改為 k8s-node1
hostnamectl set-hostname k8s-node1

開啟br_netfilter 模組；重啟OS
cat <<EOF | tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF
reboot

允許 bridge 通訊
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward                 = 1
EOF
sysctl --system

開啟以下的 port
firewall-cmd --add-port=10250/tcp --permanent
firewall-cmd --add-port=30000-32767/tcp --permanent
firewall-cmd --reload

安裝docker
1.更新yum
yum -y update

2.安裝yum-utils
yum -y install yum-utils

3.新增yum資源庫
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum -y install epel-release

4.安裝最新版docker套件
yum -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose

建立目錄 /etc/docker
mkdir /etc/docker

設定 Docker Daemon
cat > /etc/docker/daemon.json <<EOF
{
"exec-opts": ["native.cgroupdriver=systemd"],
"log-driver": "json-file",
"log-opts": {
"max-size": "100m"
},
"storage-driver": "overlay2",
"storage-opts": [
"overlay2.override_kernel_check=true"
]
}
EOF
mkdir -p /etc/systemd/system/docker.service.d
systemctl daemon-reload
systemctl restart docker
systemctl enable docker

準備安裝 kubeadm, kubelet and kubectl
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

關閉 SELinux
setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

安裝 kubelet, kubeadm and kubectl 等工具
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet //目前應該會出錯誤訊息，先不管它

關閉 Swap；重啟OS
sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
swapoff -a
reboot

刪除containerd config；重啟containerd
rm -f /etc/containerd/config.toml
systemctl restart containerd

使用先前複製的資訊，將 Worker node 加入 K8s Cluster 中
kubeadm join --token abugq8.oqmz3ut17bxztiyd 192.168.105.220:6443 --discovery-token-ca-cert-hash sha256:ce2c26377445ffea78db8d8d5e93eae8b8d62e6a179aa31b6c0854c408828c76

如果忘了複製，可以用下列方法找出來
kubectl get secrets -n kube-system
kubectl get secrets -n kube-system bootstrap-token-xxxxxx -o yaml
id=$(kubectl get secrets -n kube-system bootstrap-token-xxxxxx -o jsonpath='{.data.token-id}' |base64 -d)
secret=$(kubectl get secrets -n kube-system bootstrap-token-xxxxxx -o jsonpath='{.data.token-secret}' |base64 -d)
取得 token 的值如下
echo $id\.$secret
CA certificate hash
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'

回到 master node 查看結果
kubectl get nodes

修改 Worker Node ROLES name
kubectl edit node k8s-node1
  labels:
    ...
    node-role.kubernetes.io/worker: ""
